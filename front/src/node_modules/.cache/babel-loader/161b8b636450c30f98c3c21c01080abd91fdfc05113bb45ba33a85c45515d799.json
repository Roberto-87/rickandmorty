{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Desktop\\\\Files\\\\soyHenry\\\\M2\\\\rick_and_morty\\\\rick_and_morty\\\\src\\\\components\\\\searchBar\\\\SearchBar.jsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport style from './SearchBar.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SearchBar(_ref) {\n  _s();\n  let {\n    onSearch\n  } = _ref;\n  const [character, setCharacter] = useState('');\n  const onHandlerInput = event => {\n    setCharacter(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.containerSearchBar,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: style.inputSearch,\n      type: \"search\",\n      value: character,\n      onChange: onHandlerInput,\n      placeholder: \"ingres\\xE1 un n\\xFAmero\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 11\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      className: style.buttonAdd,\n      onClick: () => onSearch(character),\n      children: \"Agregar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 7\n  }, this);\n}\n//las props van siempre desde los padres a los hijos, en cambio, los eventos van desde los hijos a los padres. En searchBar puedo tener un evento cuya función esté en app\n_s(SearchBar, \"pv9IsLL1os8EqJDWV1vNc0qPYrI=\");\n_c = SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["useState","style","SearchBar","onSearch","character","setCharacter","onHandlerInput","event","target","value","containerSearchBar","inputSearch","buttonAdd"],"sources":["C:/Users/Lenovo/Desktop/Files/soyHenry/M2/rick_and_morty/rick_and_morty/src/components/searchBar/SearchBar.jsx"],"sourcesContent":["import { useState } from 'react';\r\nimport style from './SearchBar.module.css'\r\n\r\nexport default function SearchBar({onSearch}) {\r\n   const [character, setCharacter]= useState('') \r\n\r\n   const onHandlerInput=(event)=>{\r\n      setCharacter(event.target.value)\r\n   }\r\n\r\n   return ( \r\n      <div className={style.containerSearchBar}>\r\n          <input className={style.inputSearch} type='search' value={character} onChange={onHandlerInput}  placeholder='ingresá un número'/> {/* ojo!!!! recordar que el value tiene que hacer referencia al estado */}\r\n         <button className={style.buttonAdd} onClick={()=>onSearch(character)}>Agregar</button> \r\n      </div>\r\n   );\r\n}\r\n//las props van siempre desde los padres a los hijos, en cambio, los eventos van desde los hijos a los padres. En searchBar puedo tener un evento cuya función esté en app"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,wBAAwB;AAAA;AAE1C,eAAe,SAASC,SAAS,OAAa;EAAA;EAAA,IAAZ;IAACC;EAAQ,CAAC;EACzC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAEL,QAAQ,CAAC,EAAE,CAAC;EAE7C,MAAMM,cAAc,GAAEC,KAAK,IAAG;IAC3BF,YAAY,CAACE,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACnC,CAAC;EAED,oBACG;IAAK,SAAS,EAAER,KAAK,CAACS,kBAAmB;IAAA,wBACrC;MAAO,SAAS,EAAET,KAAK,CAACU,WAAY;MAAC,IAAI,EAAC,QAAQ;MAAC,KAAK,EAAEP,SAAU;MAAC,QAAQ,EAAEE,cAAe;MAAE,WAAW,EAAC;IAAmB;MAAA;MAAA;MAAA;IAAA,QAAE,KAAC,eACnI;MAAQ,SAAS,EAAEL,KAAK,CAACW,SAAU;MAAC,OAAO,EAAE,MAAIT,QAAQ,CAACC,SAAS,CAAE;MAAA,UAAC;IAAO;MAAA;MAAA;MAAA;IAAA,QAAS;EAAA;IAAA;IAAA;IAAA;EAAA,QACnF;AAEZ;AACA;AAAA,GAdwBF,SAAS;AAAA,KAATA,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}